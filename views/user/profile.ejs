<%- include("../../views/partials/user/userHeader") %>
  <style>
    .card-green {
      background-color: #e2e2e284;
    }



    .dashboard-menu {
      background-color: #e2e2e284;
      border-radius: 10px;
      padding: 15px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .dashboard-menu .nav-link {
      font-weight: bold;
      color: #683030;

      transition: box-shadow 0.3s ease;
    }

    .dashboard-menu .nav-link:hover {
      color: #b95a5a;
      box-shadow: 0 4px 10px rgba(3, 3, 3, 0.1), 0 4px 20px rgba(0, 0, 0, 0.0);
    }

    .card {
      border-radius: 10px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
      margin-bottom: 20px;
    }

    .card-header {
      background-color: #794848;
      color: white;

      border-color: #1a1a1a;
    }

    .btn-success {
      background-color: #b95a5a;
      border-color: #928c8c;
    }

    .btn-success:hover {
      background-color: #952020;
    }

    .form-group {
      margin-bottom: 15px;
    }

    .required {
      color: red;
    }

    @media (max-width: 768px) {
      .dashboard-menu {
        padding: 10px;
      }

      .card {
        margin-bottom: 15px;
      }
    }

    .page-header.breadcrumb-wrap {
      background-color: #e2e2e284;
      padding: 15px 0;
    }

    .breadcrumb {
      display: flex;
      align-items: center;
      font-family: 'Arial', sans-serif;
      font-size: 16px;
      color: #121311;
      background-color: #e2e2e284;
    }

    .breadcrumb a {
      color: #ff0000;
      text-decoration: none;
      position: relative;
      margin: 0 5px;
    }

    .breadcrumb a:hover {
      color: #b30000;
    }

    .breadcrumb span {
      margin: 0 5px;
      color: #656565b5;
    }

    .breadcrumb a::after {
      content: '';
      position: absolute;
      width: 100%;
      height: 2px;
      background: #e2e2e284;
      left: 0;
      bottom: -2px;
      transform: scaleX(0);
      transition: transform 0.3s ease;
    }

    .breadcrumb a:hover::after {
      transform: scaleX(1);
    }

    .mlft-6 {
      margin: 15px !important;

    }

    .card .card-header {
      padding: 1rem;
      margin-bottom: 0;
      background-color: #1e1e1e;

    }

    .btn-small {

      color: #088178;
    }

    .dot {
      height: 12px;
      width: 12px;
      border-radius: 50%;
      display: inline-block;
      margin-left: 8px;
      transition: background-color 0.3s ease;
    }

    .form-check-input:checked+.form-check-label .dot {
      background-color: #28a745;
      /* Green for active */
    }

    .form-check-input+.form-check-label .dot {
      background-color: #ccc;
      /* Gray for inactive */
    }

    .custom-alert {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 16px 24px;
      border-radius: 50px;
      background-color: white;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.35);
      z-index: 1000;
      display: flex;
      align-items: center;
      gap: 12px;
      transform: translateX(150%);
      transition: transform 0.3s ease-in-out;
      max-width: 350px;

    }

    .custom-alert.show {
      transform: translateX(0);
    }


    .alert-icon {
      font-size: 20px;
    }

    .alert-icon.success {
      color: #4CAF50;
    }

    .alert-icon.error {
      color: #27c200;
    }

    .alert-message {
      color: #333;
      font-size: 14px;
      margin: 0;
    }

    .alert-close {
      background: transparent;
      border: none;
      color: #999;
      cursor: pointer;
      font-size: 18px;
      padding: 0;
      margin-left: auto;

    }

    .alert-close:hover {
      color: #666;
    }
  </style>

  <main class="main">
    <div class="page-header breadcrumb-wrap mb-3">
      <div class="container">
        <div class="breadcrumb">
          <a href="#" rel="nofollow">Home</a>
          <span></span> Profile <span></span> Account
        </div>
      </div>
    </div>
    <section class="pt-10 pb-10">
      <div class="container">
        <div class="row">
          <div class="col-lg-10 m-auto">
            <div class="row  ">
              <div class="col-md-4 cstm-product ">
                <div class="dashboard-menu">
                  <ul class="nav flex-column" role="tablist">
                    <li class="nav-item">
                      <a class="nav-link active" id="dashboard-tab" data-bs-toggle="tab" href="#dashboard" role="tab"
                        aria-controls="dashboard" aria-selected="false">
                        <i class="fi-rs-settings-sliders mr-10"></i>Dashboard
                      </a>
                    </li>
                    <li class="nav-item">
                      <a class="nav-link" id="address-tab" data-bs-toggle="tab" href="#address" role="tab"
                        aria-controls="address" aria-selected="true">
                        <i class="fi-rs-marker mr-10"></i>My Address
                      </a>
                    </li>
                    <li class="nav-item">
                      <a class="nav-link" id="orders-tab" data-bs-toggle="tab" href="#orders" role="tab"
                        aria-controls="orders" aria-selected="false">
                        <i class="fi-rs-shopping-bag mr-10"></i>Orders
                      </a>
                    </li>
                    <li class="nav-item">
                      <a class="nav-link" id="track-orders-tab" data-bs-toggle="tab" href="#track-orders" role="tab"
                        aria-controls="track-orders" aria-selected="false">
                        <i class="fi-rs-shopping-cart-check mr-10"></i>Wallet Status
                      </a>
                    </li>
                    <li class="nav-item">
                      <a class="nav-link" id="track-orders-tab" data-bs-toggle="tab" href="#wallet-history" role="tab"
                        aria-controls="track-orders" aria-selected="false">
                        <i class="fi-rs-shopping-cart-check mr-10"></i>Wallet History
                      </a>
                    </li>
                    <!-- <li class="nav-item">
                   <a class="nav-link" id="track-orders-tab" data-bs-toggle="tab" href="#referal" role="tab" aria-controls="track-orders" aria-selected="false">
                     <i class="fi-rs-shopping-cart-check mr-10"></i>Referals
                   </a>
                 </li> -->
                    <li class="nav-item">
                      <a class="nav-link" href="/logout">
                        <i class="fi-rs-sign-out mr-10"></i>Logout
                      </a>
                    </li>
                  </ul>
                </div>
              </div>
              <div class="col-md-8 cstm-product">
                <div class="tab-content dashboard-content">

                  <div class="tab-pane fade show active" id="dashboard" role="tabpanel" aria-labelledby="dashboard-tab">
                    <div class="card card-green">
                      <div class="card-header">

                        <h5 class="mb-0 text-center" style="color: white;">User Profile</h5>
                      </div>
                      <div class="card-body text-center">
                        <h5 class="card-title">
                          <%=user.name%>
                        </h5>
                        <p class="card-text">
                          <strong>Phone:</strong>
                          <%=user.phoneNumber%>
                        </p>
                        <p class="card-text">
                          <strong>Email:</strong>
                          <%=user.email%>
                        </p>
                        <a href="/change-email" class="btn btn-sm btn-success ml-2">Change Email</a>
                        <a href="/change-password" class="btn btn-sm btn-success">Change Password</a>

                      </div>
                    </div>
                  </div>

                  <div class="tab-pane fade" id="address" role="tabpanel" aria-labelledby="address-tab">
                    <div class="row">
                      <% if (userAddress) { %>
                        <% userAddress.address.forEach((address)=> { %>
                          <div class="col-lg-6 mt-10 mb-10">
                            <div class="card mb-3 mb-lg-0">
                              <div class="card-header d-flex justify-content-between align-items-center">
                                <h5 class="mb-0" style="color: #eee2e9;">
                                  <%= address.addressType %>
                                </h5>
                                <div class="form-check">
                                  <input class="form-check-input default-address-radio" type="radio"
                                    name="defaultAddress" id="defaultAddress<%= address._id %>"
                                    value="<%= address._id %>" <%=address.isDefault ? "checked" : "" %>
                                  />
                                  <label class="form-check-label" for="defaultAddress<%= address._id %>">
                                    <span class="dot" style="
                                   height: 12px;
                                   width: 12px;
                                   border-radius: 50%;
                                   display: inline-block;
                                   
                                 "></span>
                                  </label>
                                </div>
                              </div>

                              <div class="card-body">
                                <address>
                                  <%= address.name %><br />
                                    <%= address.city %><br />
                                      <%= address.landMark %><br />
                                        <%= address.state %>
                                </address>
                                <p>
                                  <%= address.pincode %>
                                </p>
                                <p>
                                  <%= address.phone %>
                                </p>
                                <p>
                                  <%= address.altPhone %>
                                </p>

                                <div class="d-flex justify-content-between">
                                  <a href="/editAddress?id=<%= address._id %>" class="btn-small">Edit</a>
                                  <a href="#" class="btn-small delete-address-btn" data-id="<%= address._id %>"
                                    data-bs-toggle="modal" data-bs-target="#deleteAddressModal">
                                    Delete
                                  </a>
                                </div>
                              </div>
                            </div>
                          </div>
                          <% }); %>
                            <% } else { %>
                              <div class="col-lg-6">
                                <div class="card mb-3 mb-lg-0">
                                  <div class="card-header">
                                    <h5 class="mb-0"></h5>
                                  </div>
                                  <div class="card-body">
                                    <address>No address</address>
                                  </div>
                                </div>
                              </div>
                              <% } %>

                                <div>
                                  <a href="/addAddress">
                                    <button class="btn btn-primary w-70 mlft-6">
                                      Add address
                                    </button>
                                  </a>
                                </div>
                    </div>
                  </div>

                  <!-- user order section -->
                  <div class="tab-pane fade" id="orders" role="tabpanel" aria-labelledby="orders-tab">
                    <div class="card">
                      <div class="card-header">
                        <h5 class="mb-0">Your Orders</h5>
                      </div>
                      <div class="card-body">
                        <div class="table-responsive">
                          <table class="table">
                            <thead>
                              <tr>
                                <th>Order ID</th>
                                <th>Date</th>
                                <th>Items</th>
                                <th>Status</th>
                                <th>Total</th>
                                <th>Actions</th>
                              </tr>
                            </thead>
                            <tbody>
                              <% try { %>
                                <% if (typeof orders !=='undefined' && orders && orders.length> 0) { %>
                                  <% orders.forEach(order=> { %>
                                    <tr>
                                      <td>#<%= order._id.toString().slice(-6) %>
                                      </td>
                                      <td>
                                        <%= new Date(order.createdOn).toLocaleDateString() %>
                                      </td>
                                      <td>
                                        <%= order.orderedItems.map(item=>
                                          item.product?.productName || 'Product Unavailable').join(', ') %>
                                      </td>
                                      <td>
                                        <span
                                          class="badge <%= order.status.toLowerCase() === 'delivered' ? 'bg-success' : 
                                                                order.status.toLowerCase() === 'pending' ? 'bg-warning' : 
                                                                order.status.toLowerCase() === 'cancelled' ? 'bg-danger' : 'bg-info' %>">
                                          <%= order.status %>
                                        </span>
                                      </td>
                                      <td>₹<%= order.finalAmount %>
                                      </td>
                                      <td>
                                        <a href="/orderDetails?orderId=<%= order._id %>"
                                          class="btn btn-sm btn-outline-primary">View Details</a>
                                      </td>
                                    </tr>
                                    <% }); %>
                                      <% } else { %>
                                        <tr>
                                          <td colspan="6" class="text-center">No orders found</td>
                                        </tr>
                                        <% } %>
                                          <% } catch (error) { %>
                                            <tr>
                                              <td colspan="6" class="text-center">Error loading orders</td>
                                            </tr>
                                            <% } %>
                            </tbody>
                          </table>
                        </div>
                      </div>
                    </div>
                  </div>

                  <!-- wallet section -->

                  <div class="tab-pane fade" id="track-orders" role="tabpanel" aria-labelledby="track-orders-tab">
                    <div class="card">
                      <div class="card-header">
                        <h5 class="mb-0">Wallet</h5>
                      </div>
                      <div class="card-body contact-from-area">
                        <div class="row">
                          <div class="col-lg-8 mx-auto text-center mt-90">
                            <!-- Wallet Balance Display -->
                            <div class="wallet-balance mb-4">
                              <h3>Your Wallet Balance: ₹<span id="walletBalance"></span></h3>
                            </div>
                            <!-- Add Money to Wallet Form -->
                            <form id="addMoneyForm">
                              <div class="form-group">
                                <label for="walletAmount" class="h4">Enter Amount</label>
                                <input type="number" id="walletAmount" class="form-control"
                                  placeholder="Enter amount to add" required />
                              </div>
                              <button type="submit" class="btn btn-success">Add Money</button>
                            </form>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div class="tab-pane fade" id="wallet-history" role="tabpanel" aria-labelledby="orders-tab">
                    <div class="card">
                      <div class="card-header">
                        <h5 class="mb-0">Wallet History</h5>
                      </div>
                      <div class="card-body">
                        <div class="table-responsive">
                          <!-- Wallet Transaction History Table -->
                          <table class="table">
                            <thead>
                              <tr>
                                <th>Date</th>
                                <th>Type</th>
                                <th>Amount</th>
                                <th>Description</th>
                                <th>Transaction ID</th>
                              </tr>
                            </thead>
                            <tbody id="walletHistoryTable">
                              <!-- Wallet History Rows Dynamically Added Here -->
                            </tbody>
                          </table>
                        </div>
                      </div>
                    </div>
                  </div>



                </div>
              </div>
            </div>
    </section>
  </main>
  <!-- Delete Confirmation Modal -->
  <div class="modal fade" id="deleteAddressModal" tabindex="-1" aria-labelledby="deleteAddressModalLabel"
    aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="deleteAddressModalLabel">Confirm Deletion</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          Are you sure you want to delete this address?
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <a href="#" id="confirmDeleteButton" class="btn btn-danger">Delete</a>
        </div>
      </div>
    </div>
  </div>
  <!-- alert -->
  <div id="alertContainer"></div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const deleteButtons = document.querySelectorAll('.delete-address-btn');
      const confirmDeleteButton = document.getElementById('confirmDeleteButton');

      deleteButtons.forEach(button => {
        button.addEventListener('click', (event) => {
          const addressId = button.getAttribute('data-id');
          confirmDeleteButton.href = `/deleteAddress?id=${addressId}`;
        });
      });


      // Function to show custom alerts
      function showCustomAlert(message, type = 'success') {
        const alertContainer = document.getElementById('alertContainer');

        // Create alert element
        const alertEl = document.createElement('div');
        alertEl.className = `custom-alert ${type}`;

        // Create alert content
        alertEl.innerHTML = `
          <i class="fa ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'} alert-icon ${type}"></i>
          <p class="alert-message">${message}</p>
          <button class="alert-close">×</button>
      `;

        // Add to container
        alertContainer.appendChild(alertEl);

        // Trigger animation
        setTimeout(() => alertEl.classList.add('show'), 10);

        // Add close button functionality
        const closeBtn = alertEl.querySelector('.alert-close');
        closeBtn.addEventListener('click', () => {
          alertEl.classList.remove('show');
          setTimeout(() => alertEl.remove(), 300);
        });

        // Auto remove after 3 seconds
        setTimeout(() => {
          if (alertEl.parentNode) {
            alertEl.classList.remove('show');
            setTimeout(() => alertEl.remove(), 300);
          }
        }, 3000);
      }




      const defaultAddressRadios = document.querySelectorAll(".default-address-radio");

      defaultAddressRadios.forEach((radio) => {
        radio.addEventListener("change", async (event) => {
          const addressId = event.target.value;

          try {
            const response = await fetch("/setDefaultAddress", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ addressId }),
            });

            if (!response.ok) {
              throw new Error(`HTTP error! Status: ${response.status}`);
            }

            const result = await response.json();

            if (result.success) {
              showCustomAlert("Default address updated successfully.", "success");

              // Dynamically update the checked state and dot colors
              defaultAddressRadios.forEach((radioButton) => {
                const label = document.querySelector(`label[for="${radioButton.id}"]`);
                const dot = label.querySelector(".dot");

                if (radioButton.value === addressId) {
                  radioButton.checked = true; // Set the selected radio as checked
                  dot.style.backgroundColor = "#28a745"; // Green for the new default address
                } else {
                  radioButton.checked = false; // Uncheck others
                  dot.style.backgroundColor = "#ccc"; // Gray for non-default addresses
                }
              });

            } else {
              showCustomAlert("Failed to update default address.", "error");
            }
          } catch (error) {
            console.error("Error updating default address:", error);
            showCustomAlert("An error occurred while updating the default address. Please try again.", "error");
          }
        });
      });



      const addMoneyForm = document.getElementById("addMoneyForm");
      const walletBalanceEl = document.getElementById("walletBalance");
      const walletHistoryTable = document.getElementById("walletHistoryTable");

      // Function to show custom alerts
      function showCustomAlert(message, type = "success") {
        const alertContainer = document.getElementById("alertContainer");

        // Create alert element
        const alertEl = document.createElement("div");
        alertEl.className = `custom-alert ${type}`;

        // Create alert content
        alertEl.innerHTML = `
      <i class="fa ${type === "success" ? "fa-check-circle" : "fa-exclamation-circle"
          } alert-icon ${type}"></i>
      <p class="alert-message">${message}</p>
      <button class="alert-close">×</button>
    `;

        // Add to container
        alertContainer.appendChild(alertEl);

        // Trigger animation
        setTimeout(() => alertEl.classList.add("show"), 10);

        // Add close button functionality
        const closeBtn = alertEl.querySelector(".alert-close");
        closeBtn.addEventListener("click", () => {
          alertEl.classList.remove("show");
          setTimeout(() => alertEl.remove(), 300);
        });

        // Auto remove after 3 seconds
        setTimeout(() => {
          if (alertEl.parentNode) {
            alertEl.classList.remove("show");
            setTimeout(() => alertEl.remove(), 300);
          }
        }, 3000);
      }

      // Fetch and display wallet balance and history
      async function fetchWalletData() {
        try {
            const response = await fetch("/wallet", { method: "GET" });
    
            if (!response.ok) {
                throw new Error(`Failed to fetch wallet data: ${response.status}`);
            }
    
            const data = await response.json();
    
            if (data.success) {
                // Update wallet balance
                walletBalanceEl.textContent = `${data.walletData.balance}`;
    
                // Populate wallet history
                walletHistoryTable.innerHTML = ""; // Clear previous rows
                
                data.walletData.transactions.forEach((transaction) => {
                    const row = document.createElement("tr");
    
                    // Date cell
                    const dateCell = document.createElement("td");
                    dateCell.textContent = new Date(transaction.date).toLocaleDateString();
    
                    // Transaction type cell
                    const typeCell = document.createElement("td");
                    typeCell.textContent = transaction.type.charAt(0).toUpperCase() + transaction.type.slice(1);
                    // Add appropriate styling based on transaction type
                    typeCell.className = transaction.type === "credit" ? "text-success" : "text-danger";
    
                    // Amount cell
                    const amountCell = document.createElement("td");
                    amountCell.textContent = `₹${transaction.amount}`;
                    amountCell.className = transaction.type === "credit" ? "text-success" : "text-danger";
    
                    // Description cell
                    const descriptionCell = document.createElement("td");
                    descriptionCell.textContent = transaction.description || "-";
    
                    // Transaction ID cell
                    const transactionIdCell = document.createElement("td");
                    transactionIdCell.textContent = transaction.transactionId;
                    transactionIdCell.className = "text-muted small";
    
                    // Append all cells to row
                    row.appendChild(dateCell);
                    row.appendChild(typeCell);
                    row.appendChild(amountCell);
                    row.appendChild(descriptionCell);
                    row.appendChild(transactionIdCell);
    
                    walletHistoryTable.appendChild(row);
                });
    
                // If you want to show refund status somewhere
                if (data.walletData.refundStatus !== 'Not Refunded') {
                    const refundStatusEl = document.getElementById('refundStatus');
                    if (refundStatusEl) {
                        refundStatusEl.textContent = data.walletData.refundStatus;
                        refundStatusEl.className = 'badge badge-info';
                    }
                }
    
            } else {
                showCustomAlert("Failed to fetch wallet data.", "error");
            }
        } catch (error) {
            console.error("Error fetching wallet data:", error);
            showCustomAlert("An error occurred while fetching wallet data.", "error");
        }
    }

      // Add Money to Wallet
      addMoneyForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        const amount = parseFloat(document.getElementById("walletAmount").value);

        if (isNaN(amount) || amount <= 0) {
          showCustomAlert("Please enter a valid amount.", "error");
          return;
        }

        try {
          const response = await fetch("/addMoney", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ amount }),
          });

          const data = await response.json();

          if (data.success) {
            showCustomAlert("Money added to wallet successfully!", "success");
            fetchWalletData(); // Refresh wallet data
          } else {
            showCustomAlert(data.message || "Failed to add money to wallet.", "error");
          }
        } catch (error) {
          console.error("Error adding money to wallet:", error);
          showCustomAlert("An error occurred while adding money to wallet.", "error");
        }
      });

      // Initial Fetch of Wallet Data
      fetchWalletData();

    });
  </script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

  <%- include("../../views/partials/user/userFooter") %>