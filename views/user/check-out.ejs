<%- include("../../views/partials/user/userHeader")%>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    
        
   
    
    <style>
        .default-address-card .card {
            border: 1px solid #000000;
            border-radius: 1px;
        }

        .default-address-card .card-body {
            padding: 20px;
        }

        .address-actions .btn-link {

            color: #000000;
            text-decoration: none;
            font-weight: 600;
            font-size: 14px;


        }



        .address-actions .btn-link:hover {
            background-color: #000000;
            color: #ffffff;
        }

        #savedAddresses {
            border: 1px solid #ebebeb;
            height: 46px;
            padding: 0 15px;
            color: #666666;
        }

        .btn-outline-dark {
            border-color: #111111;
            color: #111111;
        }

        .btn-outline-dark:hover {
            background-color: #111111;
            color: #ffffff;
        }

        .modal-content {
            border-radius: 4px;
        }

        .modal-header {
            border-bottom: 1px solid #ebebeb;
            background-color: #f8f9fa;
        }

        .modal-footer {
            border-top: 1px solid #ebebeb;
        }

        .form-control {
            height: 46px;
            border: 1px solid #ebebeb;
            border-radius: 4px;
            padding: 0 15px;
        }

        .form-control:focus {
            border-color: #111111;
            box-shadow: none;
        }

        .custom-control-input:checked~.custom-control-label::before {
            background-color: #111111;
            border-color: #111111;
        }


        #alertContainer {
            position: fixed;
            top: 10px;
            right: 10px;
            z-index: 1050;
            /* Above other elements */
            max-width: 400px;
        }

        .coupon-modal .modal-dialog {
            max-width: 400px;
        }

        .coupon-list-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            border-bottom: 1px solid #ebebeb;
        }

        .coupon-list-item:last-child {
            border-bottom: none;
        }

        .coupon-details {
            flex-grow: 1;
        }

        .coupon-code {
            font-weight: bold;
            margin-right: 10px;
        }

        .coupon-discount {
            color: #28a745;
        }
    </style>

    <!-- Breadcrumb Section Begin -->
    <section class="breadcrumb-option">
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                    <div class="breadcrumb__text">
                        <h4>Checkout</h4>
                        <div class="breadcrumb__links">
                            <a href="/">Home</a>
                            <a href="/shop">Shop</a>
                            <a href="/cart">Shopping Cart</a>
                            <span>Checkout</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- Breadcrumb Section End -->

    <!-- Checkout Section Begin -->
    <section class="checkout spad">
        <div class="container">
            <div class="row">
                <div class="col-lg-7">
                    <div class="checkout__form">
                        <h6 class="checkout__title">Shipping Address</h6>



                        <div class="default-address-card card">
                            <div class="card-body">
                                <!-- Default Address Display -->
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <h6 class="card-subtitle text-muted">Default Address</h6>
                                    <button class="btn  p-1" type="button" data-bs-toggle="modal"
                                        data-bs-target="#changeAddressModal">
                                        Change
                                    </button>
                                </div>
                                <%if(defaultAddress){%>
                                <h5 class="card-title">
                                    <%= defaultAddress.name %>
                                </h5>
                                <p class="card-text">
                                    <%= defaultAddress.landMark %><br>
                                        <%= defaultAddress.city %>, <%= defaultAddress.state %><br>
                                                <%= defaultAddress.pincode %><br>
                                                    Phone: <%= defaultAddress.phone %>, <%= defaultAddress.altPhone %>
                                </p>
                                <% }else{ %>
                                    <p>No default address found</p>
                                <% } %>
                            </div>
                        </div>

                        <!-- Modal for Changing Address -->
                        <div class="modal fade" id="changeAddressModal" tabindex="-1"
                            aria-labelledby="changeAddressModalLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="changeAddressModalLabel">Select Address</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal"
                                            aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        <ul class="list-group">
                                            <% savedAddresses.forEach(address=> { %>
                                                <li
                                                    class="list-group-item d-flex justify-content-between align-items-center">
                                                    <div>
                                                        <strong>
                                                            <%= address.addressType %>
                                                        </strong><br>
                                                        <%= address.name %>, <%= address.landMark %>, <%= address.city
                                                                    %>, <%= address.state %><br>
                                                                        <%= address.pincode %><br>
                                                                            Phone: <%= address.phone %>, <%=
                                                                                    address.altPhone %>
                                                    </div>
                                                    <button class="btn btn-sm btn-primary select-address-btn"
                                                        data-id="<%= address._id %>">
                                                        Select
                                                    </button>
                                                </li>
                                                <% }); %>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>



                        <!-- Add New Address Button -->
                        <div class="text-right mb-4">
                            <button type="button" class="btn btn-outline-dark" data-toggle="modal"
                                data-target="#addAddressModal">
                                + Add New Address
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Order Summary Column -->
                <div class="col-lg-5">
                    <div class="checkout__order">
                        <h6 class="order__title">Your order</h6>
                        <div class="checkout__order__products">Products <span>Total</span></div>
                        <ul class="checkout__total__products">
                            <% cart.items.forEach(item=> { %>
                                <li>
                                    <%= item.productId.productName %> × <%= item.quantity %> <span>₹<%= item.totalPrice
                                                    %></span>
                                </li>
                                <% }); %>
                        </ul>

                        <ul class="checkout__total__all">
                            <li>Subtotal <span>₹<%= subtotal %></span></li>
                            <% if (cart.discount) { %>
                                <li>Discount <span>-₹<%= discount %></span></li>
                                <% } %>
                                <li>Delivery Charge <span>₹<%=cart.deliveryCharge%></span></li>
                                    <li>Total <span>₹<%=total%></span></li>
                        </ul>


                        <!-- coupons section -->

                        <div class="text-right mb-3">
                            <button type="button" class="btn btn-outline-dark" data-toggle="modal"
                                data-target="#couponSelectionModal">
                                Select Coupon
                            </button>
                        </div>

                        <!-- Coupon Selection Modal -->
                        <div class="modal fade coupon-modal" id="couponSelectionModal" tabindex="-1" role="dialog"
                            aria-labelledby="couponSelectionModalLabel" aria-hidden="true">
                            <div class="modal-dialog" role="document">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="couponSelectionModalLabel">Available Coupons</h5>
                                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                            <span aria-hidden="true">&times;</span>
                                        </button>
                                    </div>
                                    <div class="modal-body" id="availableCouponsList">
                                        <% coupons.forEach(function(coupon) { %>
                                            <div class="coupon-list-item">
                                                <div class="coupon-details">
                                                    <span class="coupon-code">
                                                        <%= coupon.name %>
                                                    </span>
                                                    <span class="coupon-discount">
                                                        ₹<%= coupon.offerPrice %>off
                                                    </span>
                                                    <br>
                                                    <small class="text-muted">Min. purchase: ₹<%= coupon.minimumPrice %>
                                                    </small>
                                                </div>
                                                <button class="btn btn-sm btn-outline-primary select-coupon"
                                                    data-coupon-id="<%= coupon._id %>"
                                                    data-coupon-code="<%= coupon.name %>"
                                                    data-discount="<%= coupon.offerPrice %>">
                                                    Apply
                                                </button>
                                            </div>
                                            <% }); %>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="checkout__input__checkbox">
                            <label for="payment">
                                Cash on Delivery
                                <input type="hidden" id="finalAmount" value="<%= cart.finalPrice %>">
                                <input type="checkbox" id="payment" name="paymentMethod" value="COD">
                                <span class="checkmark"></span>
                            </label>
                        </div>
                        <div class="checkout__input__checkbox">
                            <label for="online">
                                Online Payment
                                <input type="checkbox" id="online" name="paymentMethod" value="online">
                                <span class="checkmark"></span>
                            </label>
                        </div>
                        <input type="hidden" id="selectedAddressId" name="selectedAddressId">
                        <button type="submit" id="placeOrderBtn" class="site-btn">PLACE ORDER</button>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Add Address Modal -->
    <div class="modal fade" id="addAddressModal" tabindex="-1" role="dialog" aria-labelledby="addAddressModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addAddressModalLabel">Add New Address</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="newAddressForm">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Addresss Type<span class="text-danger">*</span></label>
                                    <input type="text" class="form-control" name="addressType" required>
                                    <div class="invalid-feedback"></div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Full Name<span class="text-danger">*</span></label>
                                    <input type="tel" class="form-control" name="name" required>
                                    <div class="invalid-feedback"></div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Land Mark<span class="text-danger">*</span></label>
                                    <input type="text" class="form-control" name="landMark" required>
                                    <div class="invalid-feedback"></div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>city<span class="text-danger">*</span></label>
                                    <input type="text" class="form-control" name="city" required>
                                    <div class="invalid-feedback"></div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>State<span class="text-danger">*</span></label>
                                    <input type="text" class="form-control" name="state" required>
                                    <div class="invalid-feedback"></div>
                                </div>
                            </div>

                        </div>

                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Pincode<span class="text-danger">*</span></label>
                                    <input type="text" class="form-control" name="pincode" required>
                                    <div class="invalid-feedback"></div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Phone<span class="text-danger">*</span></label>
                                    <input type="text" class="form-control" name="phone" required>
                                    <div class="invalid-feedback"></div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Alternate Phone<span class="text-danger">*</span></label>
                                    <input type="text" class="form-control" name="altPhone" required>
                                    <div class="invalid-feedback"></div>
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="custom-control custom-checkbox">
                                <input type="checkbox" class="custom-control-input" id="isDefault" name="isDefault">
                                <label class="custom-control-label" for="isDefault">Make this my default
                                    address</label>
                            </div>
                        </div>
                    </form>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveAddress">Save Address</button>
                </div>
            </div>
        </div>
    </div>


    <div id="alertContainer"></div>

  

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const couponModal = document.getElementById('couponSelectionModal');
            const selectCouponButtons = document.querySelectorAll('.select-coupon');
            const couponSection = document.querySelector('.text-right.mb-3'); // Where the "Select Coupon" button is.
            const checkoutTotals = document.querySelector('.checkout__total__all'); // For cart totals.

            // Fetch the applied coupon when the page loads
            fetch('/getAppliedCoupon')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Assuming these values are now returned from the server
                        applyCouponUI(data.appliedCoupon.name, data.appliedCoupon.discount);
                        updateTotals(
                            data.subtotal,
                            data.productDiscount,
                            data.appliedCoupon.discount,
                            data.finalPrice
                        );
                    }
                })
                .catch(error => {
                    console.error('Error fetching applied coupon:', error);
                });

            function closeModal(modal) {
                modal.classList.remove('show');
                modal.setAttribute('aria-hidden', 'true');
                modal.style.display = 'none';

                // Remove modal backdrop
                const backdrop = document.querySelector('.modal-backdrop');
                if (backdrop) {
                    backdrop.remove();
                }

                // Remove modal-open class from body
                document.body.classList.remove('modal-open');
            }

            function updateTotals(subtotal, productDiscount, couponDiscount, finalPrice) {
                checkoutTotals.innerHTML = `
                    <li>Subtotal <span>₹${subtotal.toFixed(2)}</span></li>
                    <li>Product Discount <span>-₹${productDiscount.toFixed(2)}</span></li>
                    <li>Coupon Discount <span>-₹${couponDiscount.toFixed(2)}</span></li>
                    <li>Delivery Charge <span>₹<%=cart.deliveryCharge%></span></li>
                    <li>Total <span>₹${finalPrice.toFixed(2)}</span></li>
                `;
            }

            function applyCouponUI(couponName, discount) {
                couponSection.innerHTML = `
                    <div class="d-flex justify-content-between align-items-center">
                        <span>
                            <strong>Coupon Applied:</strong> ${couponName} 
                            <span class="text-success">(-₹${discount})</span>
                        </span>
                        <button class="btn btn-sm btn-outline-danger remove-coupon">Remove</button>
                    </div>
                `;

                // Add event listener for removing the coupon
                const removeCouponButton = document.querySelector('.remove-coupon');
                removeCouponButton.addEventListener('click', function () {
                    removeCoupon();
                });
            }

            function removeCoupon() {
                // Send request to server to remove the coupon
                fetch('/removeCoupon', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({}) // No need for coupon ID, as it's stored in the cart
                })
                    .then(response => response.json())
                    .then(data => {
                        location.reload();
                        if (data.success) {
                            // Restore "Select Coupon" button
                            couponSection.innerHTML = `
                            <button type="button" class="btn btn-outline-dark" data-toggle="modal" data-target="#couponSelectionModal">
                                Select Coupon
                            </button>
                        `;

                            // Reset totals
                            updateTotals(subtotsl, productDiscount, finalPrice); // Example values, update with actual values from server
                        } else {
                            alert('Failed to remove coupon');
                        }
                    })
                    .catch(error => {
                        console.error('Error removing coupon:', error);
                    });
            }

            selectCouponButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const couponId = this.getAttribute('data-coupon-id');
                    const couponName = this.getAttribute('data-coupon-code');
                    const discount = parseFloat(this.getAttribute('data-discount'));

                    // Send request to server to apply the coupon
                    fetch('/applyCoupon', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ couponId }) // Send coupon ID to apply
                    })
                        .then(response => response.json())
                        .then(data => {
                            location.reload();
                            if (data.success) {
                                // Close the modal
                                closeModal(couponModal);

                                // Update the UI with coupon details
                                applyCouponUI(couponName, discount);
                                updateTotals(subtotal, discount, finalPrice - discount); // Update with actual values from server

                            } else {
                                alert(data.message);
                            }
                        })
                        .catch(error => {
                            console.error('Error applying coupon:', error);
                        });
                });
            });

        });

    </script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const form = document.getElementById("newAddressForm");
            const saveAddressButton = document.getElementById("saveAddress");

            // Add validation on save button click
            saveAddressButton.addEventListener("click", function () {
                if (validateForm(form)) {
                    // Proceed with form submission (e.g., via AJAX or a POST request)
                    console.log("Form is valid. Submitting...");
                    showAlert("Address saved successfully!");
                } else {
                    console.log("Form validation failed.");
                }
            });

            function validateForm(form) {
                let isValid = true;
                const inputs = form.querySelectorAll("input[required]");

                inputs.forEach((input) => {
                    if (!input.value.trim()) {
                        isValid = false;
                        input.classList.add("is-invalid");
                        displayError(input, `${input.previousElementSibling.innerText} is required.`);
                    } else {
                        input.classList.remove("is-invalid");
                        removeError(input);
                    }
                });

                // Validate phone number format (optional)
                const phoneInput = form.querySelector('input[name="phone"]');
                if (!/^\d{10}$/.test(phoneInput.value)) {
                    isValid = false;
                    phoneInput.classList.add("is-invalid");
                    displayError(phoneInput, "Phone number must be 10 digits.");
                }

                // Validate ZIP Code format (optional)
                const zipInput = form.querySelector('input[name="pincode"]');
                if (!/^\d{5,6}$/.test(zipInput.value)) {
                    isValid = false;
                    zipInput.classList.add("is-invalid");
                    displayError(zipInput, "Pincode must be 5 or 6 digits.");
                }

                return isValid;
            }

            function displayError(input, message) {
                let error = input.nextElementSibling;
                if (!error || !error.classList.contains("invalid-feedback")) {
                    error = document.createElement("div");
                    error.className = "invalid-feedback";
                    input.parentElement.appendChild(error);
                }
                error.innerText = message;
            }

            function removeError(input) {
                const error = input.nextElementSibling;
                if (error && error.classList.contains("invalid-feedback")) {
                    error.remove();
                }
            }
        });
    </script>

    <script>
        $(document).ready(function () {



            const defaultAddress = JSON.parse('<%- JSON.stringify(defaultAddress) %>');

            if (defaultAddress) {
                updateDefaultAddress(defaultAddress);
            }

            // Function to update the default address dynamically
            function updateDefaultAddress(address) {
                const addressHtml = `
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h6 class="card-subtitle text-muted">Default Address</h6>
                        <button class="btn btn-link p-1" type="button" data-bs-toggle="modal" data-bs-target="#changeAddressModal">
                            Change
                        </button>
                    </div>
                    <h5 class="card-title">${address.name}</h5>
                    <p class="card-text">
                        ${address.landMark}<br>
                        ${address.city}, ${address.state}<br>
                        ${address.pincode}<br>
                        Phone: ${address.phone}, ${address.altPhone}
                    </p>
                `;
                $('.default-address-card .card-body').html(addressHtml);

                // Set the hidden input field for the selected address ID
                $('#selectedAddressId').val(address._id);  // Set the address ID to hidden field
            }


            // Handle address selection from modal
            $(document).on('click', '.select-address-btn', function () {
                const selectedAddressId = $(this).data('id');

                if (selectedAddressId) {
                    // Fetch the selected address details
                    $.ajax({
                        url: `/get-address/${selectedAddressId}`,
                        method: 'GET',
                        success: function (response) {
                            if (response.address) {
                                updateDefaultAddress(response.address);
                                $('#changeAddressModal').modal('hide'); // Close the modal
                                $('#selectedAddressId').val(selectedAddressId); // Set hidden input value
                            } else {
                                showAlert('Selected address not found!', 'danger');
                            }
                        },
                        error: function () {
                            showAlert('Error fetching the selected address!', 'danger');
                        }
                    });
                }
            });
          



            $('#saveAddress').click(function () {
                const form = $('#newAddressForm');
                const formData = {
                    addressType: form.find('input[name="addressType"]').val(),
                    name: form.find('input[name="name"]').val(),
                    landMark: form.find('input[name="landMark"]').val(),
                    city: form.find('input[name="city"]').val(),
                    state: form.find('input[name="state"]').val(),
                    pincode: form.find('input[name="pincode"]').val(),
                    phone: form.find('input[name="phone"]').val(),
                    altPhone: form.find('input[name="altPhone"]').val(),
                    isDefault: form.find('input[name="isDefault"]').is(':checked')
                };

                // Validate the form
                if (validateForm(form)) {
                    // Send AJAX request to add the new address
                    $.ajax({
                        url: '/add-address', // Adjust the URL to your route
                        method: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(formData),
                        success: function (response) {
                            if (response.status) {
                                // Address added successfully
                                showAlert('Address added successfully!', 'success');
                                // Optionally, you can close the modal and refresh the address list
                                $('#addAddressModal').modal('hide');
                                // Reload the page or update the address list

                                setTimeout(() => {
                                    location.reload();
                                }, 1500)

                            } else {
                                showAlert(response.message || 'Failed to add address!', 'danger');
                            }
                        },
                        error: function () {
                            showAlert('Error adding address. Please try again!', 'danger');
                        }
                    });
                }
            });




              // Add event listeners for payment method checkboxes
              const codCheckbox = $('#payment');
              const onlineCheckbox = $('#online');
              const placeOrderBtn = $('#placeOrderBtn');

              const finalAmount = parseFloat($('#finalAmount').val()); // Get final price from hidden input

              // Disable COD checkbox if finalPrice > 1000
              if (finalAmount > 1000) {
                  codCheckbox.prop('disabled', true);
                  codCheckbox.parent().css('opacity', '0.5'); // Optional: Reduce opacity to indicate it's disabled
                  showAlert('Cash on Delivery is not available for orders above ₹1000.', 'warning');
              }
          
  
              // Initially disable the place order button
              placeOrderBtn.prop('disabled', false); // Changed to false to allow clicking without selection
  
             
  
              $('#placeOrderBtn').click(function (e) {
                e.preventDefault();
                console.log('Place Order Button Clicked');
                const selectedAddressId = $('#selectedAddressId').val();
                console.log('Selected Address ID:', selectedAddressId);
            
                if (!selectedAddressId) {
                    showAlert('Please select an address to place your order!', 'warning');
                    return false;
                }
            
                if (!codCheckbox.is(':checked') && !onlineCheckbox.is(':checked')) {
                    showAlert('Please select a payment method!', 'warning');
                    return false;
                }
            
                if (onlineCheckbox.is(':checked')) {
                    // Directly create Razorpay order and open payment gateway
                    $.ajax({
                        url: '/create-razorpay-order',
                        method: 'POST',
                        success: function (response) {
                            if (response.success) {
                                const options = {
                                    key: '<%= process.env.RAZORPAY_KEY_ID %>',
                                    amount: response.amount,
                                    currency: response.currency,
                                    name: 'Ease and Style',
                                    order_id: response.orderId,
                                    handler: function (paymentResponse) {
                                        console.log('Payment Response:', paymentResponse);
                                        
                                        // Place order after payment attempt
                                        $.ajax({
                                            url: '/place-order',
                                            method: 'POST',
                                            contentType: 'application/json',
                                            data: JSON.stringify({
                                                addressId: selectedAddressId,
                                                paymentMethod: 'razorpay',
                                                razorpayPaymentId: paymentResponse.razorpay_payment_id,
                                                razorpayOrderId: paymentResponse.razorpay_order_id,
                                                razorpaySignature: paymentResponse.razorpay_signature,
                                                paymentData: paymentResponse,
                                                paymentStatus: 'success'
                                            }),
                                            success: function (response) {
                                                if (response.orderId) {
                                                    showAlert('Order placed successfully!', 'success');
                                                    setTimeout(() => {
                                                        window.location.href = `/orderDetails?orderId=${response.orderId}`;
                                                    }, 500);
                                                } else {
                                                    showAlert('Failed to place order', 'danger');
                                                }
                                            },
                                            error: function () {
                                                showAlert('Error placing order', 'danger');
                                            }
                                        });
                                    },
                                    modal: {
                                        ondismiss: function() {
                                            // Handle payment modal dismissal
                                            $.ajax({
                                                url: '/place-order',
                                                method: 'POST',
                                                contentType: 'application/json',
                                                data: JSON.stringify({
                                                    addressId: selectedAddressId,
                                                    paymentMethod: 'razorpay',
                                                    paymentStatus: 'failed'
                                                }),
                                                success: function (response) {
                                                    if (response.orderId) {
                                                        showAlert('Order placed with pending payment!', 'warning');
                                                        setTimeout(() => {
                                                            window.location.href = `/orderDetails?orderId=${response.orderId}`;
                                                        }, 500);
                                                    }
                                                }
                                            });
                                        }
                                    },
                                    theme: {
                                        color: '#000000'
                                    }
                                };
            
                                const rzp = new Razorpay(options);
                                rzp.open();
                            } else {
                                showAlert('Failed to create Razorpay order' + (response.message || ''), 'danger');
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Razorpay Order Creation Error:', {
                                status: status,
                                error: error,
                                responseText: xhr.responseText
                            });
                            showAlert('Error creating Razorpay order', 'danger');
                        }
                    });
                
                  } else if (codCheckbox.is(':checked')) {
                      // Existing COD order placement logic
                      $.ajax({
                          url: '/place-order',
                          method: 'POST',
                          contentType: 'application/json',
                          data: JSON.stringify({
                              addressId: selectedAddressId,
                              paymentMethod: 'COD'
                          }),
                          success: function (response) {
                              if (response.orderId) {
                                  showAlert('Order placed successfully!', 'success');
                                  setTimeout(() => {
                                      window.location.href = `/orderDetails?orderId=${response.orderId}`;
                                  }, 500);
                              } else {
                                  showAlert(response.message || 'Failed to place order!', 'danger');
                              }
                          },
                          error: function () {
                              showAlert('Error placing order. Please try again!', 'danger');
                          }
                      });
                  }
              });



            // Function to validate the form
            function validateForm(form) {
                let isValid = true;
                const inputs = form.find('input[required]');

                inputs.each(function () {
                    if (!$(this).val().trim()) {
                        isValid = false;
                        $(this).addClass('is-invalid');
                    } else {
                        $(this).removeClass('is-invalid');
                    }
                });

                return isValid;
            }



            // Function to show alert messages
            // Modified showAlert function to ensure alerts are visible
            function showAlert(message, type = 'success') {
                const alertHtml = `
            <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        `;
                $('#alertContainer').html(alertHtml);

                // Scroll to alert
                $('#alertContainer')[0].scrollIntoView({ behavior: 'smooth' });

                // Auto-dismiss after 5 seconds
                setTimeout(() => {
                    $('.alert').fadeOut('slow', function () {
                        $(this).remove();
                    });
                }, 4000);
            }

        });
    </script>

    <%- include("../../views/partials/user/userFooter")%>